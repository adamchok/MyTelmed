/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/sw-push.js":
/*!***************************!*\
  !*** ./public/sw-push.js ***!
  \***************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * MyTelmed Push Notification Service Worker\n * Handles push events, notification clicks, and background sync\n */ // Workbox manifest injection - required for PWA caching\n\nimportScripts(\"https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js\");\n// Inject the manifest - this will be replaced by Workbox during build\nif (typeof [] !== \"undefined\") {\n    // This ensures the manifest is included in the service worker\n    console.log(\"Workbox manifest loaded\");\n}\n// Constants\nconst NOTIFICATION_TAG_PREFIX = \"mytelmed-\";\nconst CACHE_NAME = \"mytelmed-notifications-v1\";\nconst API_BASE_URL = self.location.origin;\nconst FALLBACK_ICON = \"/assets/logos/mytelmed-logo.png\";\nconst FALLBACK_BADGE = \"/assets/logos/mytelmed-logo.png\";\n// Notification action handlers\nconst NOTIFICATION_ACTIONS = {\n    view: \"View Details\",\n    dismiss: \"Dismiss\",\n    calendar: \"Add to Calendar\",\n    order: \"Order Now\",\n    renew: \"Renew Now\",\n    remind: \"Remind Later\",\n    track: \"Track Delivery\",\n    contact: \"Contact Support\"\n};\n// URL mappings for different notification types\nconst NOTIFICATION_URLS = {\n    APPOINTMENT_REMINDER_PATIENT: \"/appointments\",\n    APPOINTMENT_CONFIRMATION_PATIENT: \"/appointments\",\n    APPOINTMENT_CANCEL_PATIENT: \"/appointments\",\n    APPOINTMENT_BOOKED_PATIENT: \"/appointments\",\n    PRESCRIPTION_CREATED: \"/prescriptions\",\n    PRESCRIPTION_EXPIRING: \"/prescriptions\",\n    PRESCRIPTION_OUT_FOR_DELIVERY: \"/prescriptions/delivery\"\n};\n/**\n * Push event handler - receives notifications from backend\n */ self.addEventListener(\"push\", (event)=>{\n    console.log(\"Push notification received:\", event);\n    if (!event.data) {\n        console.log(\"Push event has no data\");\n        return;\n    }\n    try {\n        // Parse notification payload\n        const payload = event.data.json();\n        console.log(\"Push payload:\", payload);\n        // Validate payload\n        if (!payload.title || !payload.body) {\n            console.error(\"Invalid push payload - missing title or body\");\n            return;\n        }\n        // Show notification\n        event.waitUntil(showNotification(payload));\n    } catch (error) {\n        console.error(\"Error processing push event:\", error);\n        // Show fallback notification\n        event.waitUntil(showFallbackNotification(\"MyTelmed Notification\", \"You have a new notification\"));\n    }\n});\n/**\n * Notification click handler\n */ self.addEventListener(\"notificationclick\", (event)=>{\n    console.log(\"Notification clicked:\", event);\n    const notification = event.notification;\n    const action = event.action;\n    const data = notification.data || {};\n    // Close the notification\n    notification.close();\n    // Handle different actions\n    event.waitUntil(handleNotificationClick(action, data));\n});\n/**\n * Notification close handler\n */ self.addEventListener(\"notificationclose\", (event)=>{\n    console.log(\"Notification closed:\", event);\n    const data = event.notification.data || {};\n    // Track notification dismissal\n    event.waitUntil(trackNotificationEvent(\"dismissed\", data));\n});\n/**\n * Show notification with proper formatting\n */ async function showNotification(payload) {\n    try {\n        const { title, body, icon = FALLBACK_ICON, badge = FALLBACK_BADGE, image, tag, data = {}, actions = [], requireInteraction = false, silent = false, vibrate = [\n            200,\n            100,\n            200\n        ] } = payload;\n        // Create notification options\n        const options = {\n            body,\n            icon,\n            badge,\n            image,\n            tag: tag || \"\".concat(NOTIFICATION_TAG_PREFIX).concat(Date.now()),\n            data: {\n                ...data,\n                timestamp: Date.now(),\n                url: getNotificationUrl(data.notificationType, data)\n            },\n            actions: actions.map((action)=>({\n                    action: action.action,\n                    title: NOTIFICATION_ACTIONS[action.action] || action.title,\n                    icon: action.icon\n                })),\n            requireInteraction,\n            silent,\n            vibrate: silent ? [] : vibrate,\n            renotify: true,\n            persistent: true\n        };\n        console.log(\"Showing notification with options:\", options);\n        // Show the notification\n        await self.registration.showNotification(title, options);\n        // Track notification delivery\n        await trackNotificationEvent(\"delivered\", data);\n        console.log(\"Notification shown successfully\");\n    } catch (error) {\n        console.error(\"Error showing notification:\", error);\n        throw error;\n    }\n}\n/**\n * Show fallback notification when payload is invalid\n */ async function showFallbackNotification(title, body) {\n    try {\n        const options = {\n            body,\n            icon: FALLBACK_ICON,\n            badge: FALLBACK_BADGE,\n            tag: \"\".concat(NOTIFICATION_TAG_PREFIX, \"fallback\"),\n            data: {\n                timestamp: Date.now(),\n                type: \"fallback\"\n            },\n            requireInteraction: false\n        };\n        await self.registration.showNotification(title, options);\n        console.log(\"Fallback notification shown\");\n    } catch (error) {\n        console.error(\"Error showing fallback notification:\", error);\n    }\n}\n/**\n * Handle notification click events\n */ async function handleNotificationClick(action, data) {\n    try {\n        console.log(\"Handling notification click:\", {\n            action,\n            data\n        });\n        // Track click event\n        await trackNotificationEvent(\"clicked\", {\n            ...data,\n            action\n        });\n        // Handle specific actions\n        await openNotificationUrl(data);\n    } catch (error) {\n        console.error(\"Error handling notification click:\", error);\n    }\n}\n/**\n * Open notification URL in client\n */ async function openNotificationUrl(data) {\n    try {\n        const url = data.url || getNotificationUrl(data.notificationType, data);\n        console.log(\"Opening notification URL:\", url);\n        // Focus existing window or open new one\n        const clients = await self.clients.matchAll({\n            type: \"window\"\n        });\n        for (const client of clients){\n            if (client.url.includes(url) && \"focus\" in client) {\n                return client.focus();\n            }\n        }\n        // Open new window\n        if (self.clients.openWindow) {\n            return self.clients.openWindow(url);\n        }\n    } catch (error) {\n        console.error(\"Error opening notification URL:\", error);\n    }\n}\n/**\n * Get notification URL based on type and data\n */ function getNotificationUrl(notificationType) {\n    let data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (data.actionUrl) {\n        return data.actionUrl;\n    }\n    const baseUrl = NOTIFICATION_URLS[notificationType] || \"/dashboard\";\n    // Add specific IDs if available\n    if (data.appointmentId && baseUrl.includes(\"appointments\")) {\n        return \"\".concat(baseUrl, \"/\").concat(data.appointmentId);\n    }\n    if (data.prescriptionId && baseUrl.includes(\"prescriptions\")) {\n        return \"\".concat(baseUrl, \"/\").concat(data.prescriptionId);\n    }\n    return baseUrl;\n}\n/**\n * Track notification events for analytics\n */ async function trackNotificationEvent(event, data) {\n    try {\n        console.log(\"Tracking notification event:\", {\n            event,\n            data\n        });\n        // Store event locally\n        const eventData = {\n            event,\n            notificationType: data.notificationType,\n            timestamp: Date.now(),\n            userId: data.userId,\n            appointmentId: data.appointmentId,\n            prescriptionId: data.prescriptionId,\n            action: data.action\n        };\n        // Store in IndexedDB or localStorage\n        await storeNotificationEvent(eventData);\n        // Try to send to backend (with background sync fallback)\n        try {\n            await sendEventToBackend(eventData);\n        } catch (error) {\n            console.log(\"Failed to send event to backend, will retry later:\", error);\n        // Could implement background sync here\n        }\n    } catch (error) {\n        console.error(\"Error tracking notification event:\", error);\n    }\n}\n/**\n * Store notification event locally\n */ async function storeNotificationEvent(eventData) {\n    try {\n        // For simplicity, using cache API to store events\n        // In production, you might want to use IndexedDB\n        const cache = await caches.open(CACHE_NAME);\n        const eventKey = \"event-\".concat(eventData.timestamp);\n        const response = new Response(JSON.stringify(eventData), {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        await cache.put(eventKey, response);\n        console.log(\"Notification event stored locally\");\n    } catch (error) {\n        console.error(\"Error storing notification event:\", error);\n    }\n}\n/**\n * Send event to backend\n */ async function sendEventToBackend(eventData) {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/notification-events\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(eventData)\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n        }\n        console.log(\"Event sent to backend successfully\");\n    } catch (error) {\n        console.error(\"Error sending event to backend:\", error);\n        throw error;\n    }\n}\n/**\n * Background sync for offline events (optional)\n */ self.addEventListener(\"sync\", (event)=>{\n    if (event.tag === \"notification-events-sync\") {\n        console.log(\"Background sync triggered for notification events\");\n        event.waitUntil(syncNotificationEvents());\n    }\n});\n/**\n * Sync stored notification events when online\n */ async function syncNotificationEvents() {\n    try {\n        const cache = await caches.open(CACHE_NAME);\n        const keys = await cache.keys();\n        for (const request of keys){\n            if (request.url.includes(\"event-\")) {\n                try {\n                    const response = await cache.match(request);\n                    const eventData = await response.json();\n                    await sendEventToBackend(eventData);\n                    await cache.delete(request);\n                    console.log(\"Synced notification event:\", eventData.event);\n                } catch (error) {\n                    console.error(\"Error syncing event:\", error);\n                }\n            }\n        }\n    } catch (error) {\n        console.error(\"Error during notification events sync:\", error);\n    }\n}\n/**\n * Clean up old notification events\n */ self.addEventListener(\"activate\", (event)=>{\n    event.waitUntil(cleanupOldEvents());\n});\nasync function cleanupOldEvents() {\n    try {\n        const cache = await caches.open(CACHE_NAME);\n        const keys = await cache.keys();\n        const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n        for (const request of keys){\n            if (request.url.includes(\"event-\")) {\n                const timestamp = parseInt(request.url.split(\"event-\")[1]);\n                if (timestamp < oneWeekAgo) {\n                    await cache.delete(request);\n                }\n            }\n        }\n        console.log(\"Cleaned up old notification events\");\n    } catch (error) {\n        console.error(\"Error cleaning up old events:\", error);\n    }\n}\nconsole.log(\"MyTelmed Push Notification Service Worker loaded\");\n// Export functions for testing\nif ( true && module.exports) {\n    module.exports = {\n        showNotification,\n        handleNotificationClick,\n        getNotificationUrl,\n        trackNotificationEvent\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                /* unsupported import.meta.webpackHot */ undefined.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/sw-push.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	!function() {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = function() {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: function(script) { return script; }
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	!function() {
/******/ 		__webpack_require__.ts = function(script) { return __webpack_require__.tt().createScript(script); };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	!function() {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push(function(options) {
/******/ 			var originalFactory = options.factory;
/******/ 			options.factory = function(moduleObject, moduleExports, webpackRequire) {
/******/ 				var hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				var cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : function() {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./public/sw-push.js");
/******/ 	
/******/ })()
;